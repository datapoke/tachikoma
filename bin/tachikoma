#!perl
# ----------------------------------------------------------------------
# tachikoma interpreter
# ----------------------------------------------------------------------
#

use strict;
use warnings;
use Tachikoma::EventFrameworks::Select;
use Tachikoma::Nodes::Router;
use Tachikoma::Nodes::TTY qw( TK_R TK_SYNC );
use Tachikoma::Nodes::Shell2;
use Tachikoma::Nodes::CommandInterpreter;
use Tachikoma::Nodes::Responder;
use Tachikoma::Nodes::Echo;
use Tachikoma::Nodes::Dumper;
use Tachikoma::Nodes::Shutdown;
use Tachikoma::Message qw( TYPE FROM PAYLOAD TM_BYTESTREAM TM_EOF );
use Tachikoma::Config;
use Getopt::Long qw( GetOptions );
use POSIX        qw( isatty );

use version; our $VERSION = qv('v2.0.192');

my $home            = ( getpwuid $< )[7];
my @default_configs = (
    "$home/.tachikoma/etc/tachikoma.conf",
    '/usr/local/etc/tachikoma.conf',
);
my $config_file   = undef;
my $line_buffered = undef;
my $scheme        = undef;
my $validate      = undef;
my $verbose       = undef;
my $debug_level   = undef;
my $debug_state   = undef;
my $help          = undef;

splice @ARGV, 1, 0, q(--) if ( @ARGV and $ARGV[0] !~ m{^-} );

my $r = GetOptions(
    'config=s'      => \$config_file,
    'scheme=s'      => \$scheme,
    'validate'      => \$validate,
    'verbose'       => \$verbose,
    'debug_level:i' => \$debug_level,
    'debug_state:i' => \$debug_state,
    'help'          => \$help,
);
my @arguments = @ARGV;
my $filename  = $arguments[0];
$debug_level = 1 if ( defined $debug_level and not $debug_level );
$debug_state = 1 if ( defined $debug_state and not $debug_state );

usage() if ( $help or not $r );
my $config = Tachikoma->configuration;
$config->load_config_file( $config_file ? $config_file : @default_configs );
Tachikoma->scheme($scheme) if ($scheme);
Tachikoma->event_framework( Tachikoma::EventFrameworks::Select->new );

my $isa_tty = isatty(*STDIN);
$verbose = 'true' if ($debug_level);
$config->debug_level($debug_level);

my $stdin     = undef;
my $shell     = Tachikoma::Nodes::Shell2->new;
my $tachikoma = Tachikoma::Nodes::CommandInterpreter->new;
my $responder = Tachikoma::Nodes::Responder->new;
my $echo      = Tachikoma::Nodes::Echo->new;
my $dumper    = Tachikoma::Nodes::Dumper->new;
my $shutdown  = Tachikoma::Nodes::Shutdown->new;
my $stdout    = Tachikoma::Nodes::TTY->filehandle( *STDOUT, TK_SYNC );
my $router    = Tachikoma::Nodes::Router->new;
my $node      = undef;

$router->name('_router');
$router->type('tachikoma');
$router->debug_state($debug_state);

$node = $stdout;
attach($shutdown);
attach($dumper);
$responder->name('_responder');
$responder->owner('_stdout');
$responder->shell($shell);
attach($responder);

$echo->name('_return_to_sender');
$echo->sink($router);

$node = $router;
$tachikoma->name('_command_interpreter');
$tachikoma->debug_state($debug_state);
attach($tachikoma);
$shell->show_commands($verbose);
$shell->want_reply($verbose);
$shell->validate($validate);
attach($shell);
$Tachikoma::Now       = time;
$Tachikoma::Right_Now = $Tachikoma::Now;

if ( length $filename ) {
    my @values = @arguments;
    $config->{var}->{$_}    = $values[$_] for ( 1 .. $#values );
    $config->{var}->{q(0)}  = shift @values;
    $config->{var}->{q(@)}  = join q( ), @values;
    $config->{var}->{q(_C)} = scalar @values;
    my @lines = ();
    my $fh;
    open $fh, '<', $filename or die "ERROR: can't open $filename: $!\n";
    push @lines, $_ while (<$fh>);
    close $fh or die $!;

    for my $line (@lines) {
        my $message = Tachikoma::Message->new;
        $message->[TYPE]    = TM_BYTESTREAM;
        $message->[FROM]    = '_stdin';
        $message->[PAYLOAD] = $line;
        $shell->fill($message) if ( not Tachikoma->shutting_down );
    }
    if ( not $shell->is_attached and not $config->secure_level ) {
        my $message = Tachikoma::Message->new;
        $message->[TYPE] = TM_EOF;
        $message->[FROM] = '_stdin';
        $shell->fill($message) if ( not Tachikoma->shutting_down );
    }
}
else {
    $shell->is_attached('true');
}

if ( $shell->is_attached ) {
    $stdin = Tachikoma::Nodes::TTY->filehandle( *STDIN, TK_SYNC | TK_R );
    $stdin->name('_stdin');
    $stdin->buffer_mode('line-buffered');
    if ($isa_tty) {
        $stdin->use_readline('true');
        $shell->want_reply('true');
        $shell->isa_tty('true');
        $shell->prompt;
        $shell->get_completions if ( $stdin->use_readline );
    }
    attach($stdin);
}

sub attach {
    my $next = shift;
    $next->sink($node);
    $node = $next;
    return;
}

# makes sure readline resets the display:
if ($isa_tty) {
    my $okay = eval {
        $router->drain if ( not Tachikoma->shutting_down );
        return 1;
    };
    my $error = $@;
    $stdin->close_filehandle if ($stdin);
    if ( not $okay ) {
        die $error;
    }
}
elsif ( not Tachikoma->shutting_down ) {
    $router->drain;
}

if ( $shell->errors
    and ( $validate or ( length $filename or not $isa_tty ) ) )
{
    print $filename ? "$filename " : 'stdin ', "had compilation errors.\n";
    exit 1;
}
print length $filename ? "$filename " : q(), "syntax OK\n" if ($validate);

sub usage {
    print "Usage:\n"
        . "tachikoma [ --config=<file>                   ]\n"
        . "          [ --scheme=<rsa,rsa-sha256,ed25519> ]\n"
        . "          [ --validate                        ]\n"
        . "          [ --verbose                         ]\n"
        . "          [ --help                            ]\n"
        . "          [ <file>                            ]\n";
    exit 1;
}
