#!perl
# ----------------------------------------------------------------------
# tachikoma job
# ----------------------------------------------------------------------
#
# $Id$
#

use strict;
use warnings;
use Tachikoma;
use Tachikoma::Job;
use Tachikoma::Nodes::Router;
use Tachikoma::Nodes::FileHandle qw( TK_R TK_SYNC );
use Tachikoma::Config qw( load_module );

use version; our $VERSION = qv('v2.0.192');

my ( $config_file, $class, $name, $arguments, $owner, $should_restart ) =
    @ARGV;
usage() if ( not $class );
srand;
my $config = Tachikoma->configuration;
$config->load_config_file($config_file);
Tachikoma->load_event_framework;

$Tachikoma::Now       = time;
$Tachikoma::Right_Now = $Tachikoma::Now;
open my $child_fh, q(+<&=), 5 or usage();
my $connector =
    Tachikoma::Nodes::FileHandle->filehandle( $child_fh, TK_R | TK_SYNC );
my $router = Tachikoma::Nodes::Router->new;
$connector->name('_parent');
$connector->type('job');
$router->name('_router');
$router->type('job');
$router->register_router_node;

load_module($class);
my $job = $class->new;
$job->connector($connector);
$job->router($router);
$job->name($name);
$job->arguments($arguments);
$job->owner($owner);
$job->type($class);
$job->pid($$);
$job->should_restart($should_restart);
local $0 = $name;
$job->initialize_graph;

$router->drain($connector);

sub usage {
    print {*STDERR} "ERROR: this program can only be run by tachikoma\n";
    exit 1;
}
