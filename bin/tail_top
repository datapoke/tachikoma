#!perl
# ----------------------------------------------------------------------
# TailTop client
# ----------------------------------------------------------------------
#

use strict;
use warnings;
use Tachikoma::EventFrameworks::Select;
use Tachikoma::Nodes::Router;
use Tachikoma::Nodes::Callback;
use Tachikoma::Nodes::Socket;
use Tachikoma::Nodes::STDIO qw( TK_R TK_SYNC );
use Tachikoma::Nodes::TailTop;
use Tachikoma::Message qw( PAYLOAD );
use Getopt::Long qw( GetOptions );

use version; our $VERSION = qv('v2.1.12');

my $home = ( getpwuid $< )[7];
Tachikoma->configuration->load_config_file(
    "$home/.tachikoma/etc/tachikoma.conf",
    '/usr/local/etc/tachikoma.conf',
);

my $help          = undef;
my $list_fields   = undef;
my $select_fields = join q(,), qw(
    hostname filename file_size
    recv_rate direction2 send_rate
    distance eta
);
my $host      = 'localhost';
my $port      = 4392;
my $use_SSL   = undef;
my %where     = ();
my %where_not = ();
my %width     = ();
my $sort      = '_distance';
my $threshold = 1;
my $delay     = 4;
my $lines     = undef;         # XXX: until wrappers are updated

my $r = GetOptions(
    'host=s'      => \$host,
    'port=i'      => \$port,
    'use-ssl'     => \$use_SSL,
    'select=s'    => \$select_fields,
    'where=s'     => \%where,
    'where_not=s' => \%where_not,
    'width=s'     => \%width,
    'sort=s'      => \$sort,
    'threshold=f' => \$threshold,
    'delay=f'     => \$delay,
    'list_fields' => \$list_fields,
    'help'        => \$help,
    'lines=i'     => \$lines,           # XXX: until wrappers are updated
);
usage() if ( $help or not $r );

Tachikoma->event_framework( Tachikoma::EventFrameworks::Select->new );

my $tail_top = Tachikoma::Nodes::TailTop->new;
list_fields() if ($list_fields);

my $router    = Tachikoma::Nodes::Router->new;
my $stdin     = Tachikoma::Nodes::STDIO->filehandle( *STDIN, TK_R );
my $get_input = Tachikoma::Nodes::Callback->new;
my $tachikoma =
    Tachikoma::Nodes::Socket->inet_client( $host, $port, undef, $use_SSL );
my $stdout = Tachikoma::Nodes::STDIO->filehandle( *STDOUT, TK_SYNC );

$stdin->sink($get_input);
$get_input->callback(
    sub {
        my $message = shift;
        my $key     = $message->[PAYLOAD];
        if ( $key eq 'q' ) {
            $router->shutdown_all_nodes;
            return;
        }
        elsif ( $key =~ m{\d} ) {
            $tail_top->delay( $key || 10 );
            return;
        }
        $tail_top->fire;
        return;
    }
);
$tachikoma->on_EOF('die');
$tachikoma->sink($tail_top);

$tail_top->name('_tail_top');
for my $field ( keys %width ) {
    $tail_top->fields->{$field}->{size} = $width{$field};
}
$tail_top->select_fields($select_fields);
$tail_top->where( \%where );
$tail_top->where_not( \%where_not );
$tail_top->sort_by($sort);
$tail_top->threshold($threshold);
$tail_top->delay($delay);
$tail_top->sink($stdout);

$stdout->on_EOF('ignore');

## no critic (RequireCheckedSyscalls)
system '/bin/stty', '-echo', 'cbreak';
$router->name('_router');
$router->drain;

sub list_fields {
    print join( q( ), sort keys %{ $tail_top->fields } ), "\n";
    exit 1;
}

sub usage {
    print "Usage:\n"
        . "tail_top [ --host=<host>                              ]\n"
        . "         [ --port=<port>                              ]\n"
        . "         [ --use-ssl                                  ]\n"
        . "         [ --select=<fields>                          ]\n"
        . "         [ --where <field>=<regex>                    ]\n"
        . "         [ --where_not <field>=<regex>                ]\n"
        . "         [ --width <field>=<size>                     ]\n"
        . "         [ --sort=<field>                             ]\n"
        . "         [ --threshold=<seconds>                      ]\n"
        . "         [ --delay=<seconds>                          ]\n"
        . "         [ --list_fields                              ]\n"
        . "         [ --help                                     ]\n";
    exit 1;
}
