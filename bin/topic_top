#!perl
# ----------------------------------------------------------------------
# TopicTop client
# ----------------------------------------------------------------------
#
# $Id$
#
use strict;
use warnings;
use Tachikoma;
use Tachikoma::EventFrameworks::Select;
use Tachikoma::Nodes::Router;
use Tachikoma::Nodes::Socket;
use Tachikoma::Nodes::STDIO qw( TK_R TK_SYNC );
use Tachikoma::Nodes::Shutdown;
use Tachikoma::Nodes::TopicTop;
use Tachikoma::Message qw( PAYLOAD );
use Getopt::Long;
require '/usr/local/etc/tachikoma.conf';

my $help          = undef;
my $list_fields   = undef;
my $select_fields = undef;
my $host          = 'localhost';
my $port          = '4381';
my $use_SSL       = undef;
my %where         = ();
my %where_not     = ();
my %width         = ();
my $sort          = '_distance';
my $threshold     = undef;
my $delay         = 4;

my $r = GetOptions(
    'host=s'      => \$host,
    'port=i'      => \$port,
    'use-ssl'     => \$use_SSL,
    'select=s'    => \$select_fields,
    'where=s'     => \%where,
    'where_not=s' => \%where_not,
    'width=s'     => \%width,
    'sort=s'      => \$sort,
    'threshold=f' => \$threshold,
    'delay=f'     => \$delay,
    'list_fields' => \$list_fields,
    'help'        => \$help,
);
usage() if ( $help or not $r );
$threshold //= 1;

if ( not $select_fields ) {
    $select_fields = join q{,}, qw(
        hostname consumer p_offset cache
        recv_rate direction2 send_rate msg_sent msg_rate
        msg_unanswered max_unanswered distance eta
    );
}

Tachikoma->event_framework( Tachikoma::EventFrameworks::Select->new );

my $topic_top = Tachikoma::Nodes::TopicTop->new;
list_fields() if ($list_fields);

my $router    = Tachikoma::Nodes::Router->new;
my $stdin     = Tachikoma::Nodes::STDIO->filehandle( *STDIN, TK_R );
my $get_input = Tachikoma::Nodes::Callback->new;
my $tachikoma =
    Tachikoma::Nodes::Socket->inet_client( $host, $port, undef, $use_SSL );
my $shutdown = Tachikoma::Nodes::Shutdown->new;
my $stdout = Tachikoma::Nodes::STDIO->filehandle( *STDOUT, TK_SYNC );

$get_input->callback(
    sub {
        my $message = shift;
        my $key     = $message->[PAYLOAD];
        if ( $key eq 'q' ) {
            $router->shutdown_all_nodes;
            return;
        }
        elsif ( $key =~ m(\d) ) {
            $topic_top->delay( $key || 10 );
            return;
        }
        $topic_top->fire;
        return;
    }
);
$stdin->sink($get_input);
$tachikoma->sink($shutdown);
$shutdown->sink($topic_top);
$topic_top->sink($stdout);
$topic_top->name('topic_top');

for my $field ( keys %width ) {
    $topic_top->fields->{$field}->{size} = $width{$field};
}

$topic_top->select_fields($select_fields);
$topic_top->where( \%where );
$topic_top->where_not( \%where_not );
$topic_top->sort($sort);
$topic_top->threshold($threshold);
$topic_top->delay($delay);

system( '/bin/stty', '-echo', 'cbreak' );
$router->drain($tachikoma);

sub list_fields {
    print join( ' ', sort keys %{ $topic_top->fields } ), "\n";
    exit 1;
}

sub usage {
    print "Usage:\n"
        . "topic_top [ --host=<host>                              ]\n"
        . "          [ --port=<port>                              ]\n"
        . "          [ --use-ssl                                  ]\n"
        . "          [ --select=<fields>                          ]\n"
        . "          [ --where <field>=<regex>                    ]\n"
        . "          [ --where_not <field>=<regex>                ]\n"
        . "          [ --width <field>=<size>                     ]\n"
        . "          [ --sort=<field>                             ]\n"
        . "          [ --threshold=<seconds>                      ]\n"
        . "          [ --delay=<seconds>                          ]\n"
        . "          [ --list_fields                              ]\n"
        . "          [ --help                                     ]\n";
    exit 1;
}
