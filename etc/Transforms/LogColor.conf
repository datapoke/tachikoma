#!/usr/bin/perl
# ----------------------------------------------------------------------
# $Id$
# ----------------------------------------------------------------------

package Log::Color;
use strict;
use warnings;
use POSIX qw( strftime );
use Time::Local;

my $i = 0;
my %M = map { $_ => $i++ } qw(
    jan feb mar apr may jun jul aug sep oct nov dec
);
my $M = join( '|', keys(%M) );

sub filter {
    my $self    = shift;
    my $message = shift;
    my $payload = shift;
    chomp($payload);
    return $self->stderr( "ERROR: empty log message from ", $message->from )
        if ( not length $payload );
    if ( $payload =~ m(^NOISE: ) ) {
        $payload =~ s(^NOISE: )();
        $payload = "\e[90m$payload\e[0m";
    }
    elsif ( $payload =~ m(^\d+) ) {
        if ( $payload =~ m(COMMAND) ) {
            $payload = "\e[41m\e[2K$payload\e[0m";
        }
        elsif ( $payload =~ m(TRAP) ) {
            $payload = "\e[41m\e[2K$payload\e[0m";
        }
        elsif ( $payload =~ m(ERROR) ) {
            $payload = "\e[41m\e[2K$payload\e[0m";
        }
        elsif ( $payload =~ m(WARNING) ) {
            $payload = "\e[43m\e[2K$payload\e[0m";
        }
        elsif ( $payload =~ m(INFO) ) {
            $payload = "\e[90m$payload\e[0m";
        }
        elsif ( $payload =~ m(DEBUG) ) {
            $payload = "\e[90m$payload\e[0m";
        }
        else {
            $payload = "\e[93m$payload\e[0m";
        }
    }
    else {
        $payload = cleanup_syslog($payload) // return "$payload\n";
        if ( $payload =~ m( su\b| sudo\b) ) {
            $payload = "\e[42m\e[2K$payload\e[0m";
        }
        elsif ( $payload =~ m( rsync-on-change) ) {
            $payload = "\e[95m$payload\e[0m";
        }
        elsif ( $payload =~ m( svnagent) ) {
            $payload = "\e[92m$payload\e[0m";
        }
        elsif ( $payload =~ m((?<!without )(error|fail))i
            and $payload =~ m((?<!\bno )$1)i )
        {
            $payload = "\e[91m$payload\e[0m";
        }
        elsif ( $payload =~ m(warn)i ) {
            $payload = "\e[91m$payload\e[0m";
        }
        elsif ( $payload =~ m(congestion drops)i ) {
            $payload = "\e[95m\e[2K$payload\e[0m";
        }
        else {
            $payload = "\e[90m$payload\e[0m";
        }
    }
    return "$payload\n";
}

sub cleanup_syslog {
    my $original = shift;
    my $payload  = $original;
    $payload =~ s{^($M)\s+(\d{1,2}) (\d\d):(\d\d):(\d\d)}{}gi or return;
    my ( $mon, $day, $hour, $min, $sec ) = ( $M{ lc $1 }, $2, $3, $4, $5 );
    return $original if ( not defined $mon );
    if ( $payload =~ s{^(\s+\S+)\s+(\d{4}-\d\d-\d\d [\d:,]+)}{$2$1} ) {
        $payload =~ s{(\s+])}{]}g;
        return $payload;
    }
    my $year = ( localtime $Tachikoma::Now )[5];
    return
       # strftime('%F %T %Z', $sec, $min, $hour, $day, $mon, $year) . $payload
        strftime( '%F %T %Z', localtime $Tachikoma::Now ) . $payload;
}

1;
