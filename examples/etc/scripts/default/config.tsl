#!/usr/bin/env /usr/local/bin/tachikoma

var hostname     = `hostname -s`;
var home         = `echo ~`;
var services_dir = <home>/.tachikoma/services;
var topics_dir   = <home>/.tachikoma/pool;

var tachikoma.services = (
    engines
    hubs
    http
    server_logs
    topic_top
);
    # benchmarks
    # sounds
    # tables
    # tasks
    # test_stream

var server_log.fields = (
    hostname
    timestamp
    process
);

var tachikoma.test_stream.port       = 2400;
var tachikoma.tasks.port             = 2500;
var tachikoma.tasks.http.port        = 2501;
var tachikoma.http.port              = 4241;
var tachikoma.http.http.port         = 4242;
var tachikoma.topic_top.port         = 4390;
var tachikoma.tail_top.hostname      = <hostname>;
var tachikoma.tail_top.input.port    = 4391;
var tachikoma.tail_top.output.port   = 4392;
var tachikoma.topic_top.hostname     = <hostname>;
var tachikoma.topic_top.input.port   = 4393;
var tachikoma.topic_top.output.port  = 4394;
var tachikoma.buffer_top.hostname    = <hostname>;
var tachikoma.buffer_top.input.port  = 4395;
var tachikoma.buffer_top.output.port = 4396;
var tachikoma.sounds.port            = 4800;
var tachikoma.benchmarks.port        = 4900;
var tachikoma.engines.port           = 5200;
var tachikoma.engines.count          = 1;
var tachikoma.server_logs.port       = 5300;
var tachikoma.lookup.port            = 5400;
var tachikoma.hubs.port              = 5500;
var tachikoma.hubs.count             = 2;
var tachikoma.tables.port            = 6100;
var tachikoma.tables.http.port       = 6124;

var hub        = localhost:5501;
var broker     = <hub>/broker;
var tail_top   = <tachikoma.tail_top.hostname>:<tachikoma.tail_top.input.port>;
var topic_top  = <tachikoma.topic_top.hostname>:<tachikoma.topic_top.input.port>;
var buffer_top = <tachikoma.buffer_top.hostname>:<tachikoma.buffer_top.input.port>;

func connect_hub {
    connect_inet <hub> <hub>;
}

func tail_probe {
    local prefix;
    if (<_C>) [
        prefix = <1>;
    ];
    connect_inet <tail_top> tail_top;
    make_node MemorySieve tail_top:sieve 4 should_warn;
    make_node TailProbe   tail_probe     4 <prefix>;
    connect_node tail_top:sieve tail_top;
    connect_node tail_probe     tail_top:sieve;
}

func topic_probe {
    local prefix;
    if (<_C>) [
        prefix = <1>;
    ];
    connect_inet <topic_top> topic_top;
    make_node MemorySieve topic_top:sieve 4 should_warn;
    make_node TopicProbe  topic_probe     4 <prefix>;
    connect_node topic_top:sieve topic_top;
    connect_node topic_probe     topic_top:sieve;
}

func buffer_probe {
    local prefix;
    if (<_C>) [
        prefix = <1>;
    ];
    connect_inet <buffer_top> buffer_top;
    make_node MemorySieve buffer_top:sieve 4 should_warn;
    make_node BufferProbe buffer_probe     4 <prefix>;
    connect_node buffer_top:sieve buffer_top;
    connect_node buffer_probe     buffer_top:sieve;
}

func run_benchmarks_profiled {
    local time = <1>;
    env NYTPROF=addpid=1:file=/tmp/nytprof.out;
    env PERL5OPT=-d:NYTProf;
    start_service benchmarks;
    if (<time>) {
        command scheduler in <time> command jobs stop_job benchmarks;
    };
    env NYTPROF=;
    env PERL5OPT=;
}

func start_service {
    local service = <1>;
    command jobs  start_job Shell <service>:job <services_dir>/<service>.tsl;
    command hosts connect_inet localhost:[var "tachikoma.<service>.port"] <service>:service;
    command tails add_tail <home>/.tachikoma/log/<service>.log _parent/server_log:link;
    connect_node <service>:job null;
}

func stop_service {
    local service = <1>;
    command jobs stop_job <service>:job;
    # rm <service>:service;
}
