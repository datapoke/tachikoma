var fsync_ports.fsync = 5600;

func fsync_source {
    local name       ||= 'fsync';
    local path       ||= '/usr/local/sync';
    local user;
    local count      //= 4;
    local probe      //= 1;
    local broadcasts ||= <path>;
    local interval   ||= 120;
    local max_files  ||= 256;
    local secure     //= 2;
    local pedantic;
    local listen_ip  //= '0.0.0.0';
    local port = var fsync_ports.<name>;
    if ( <user> ) [
        local count = 1;
    ];
    if ( not <port> ) {
        die "invalid fsync channel: <name>";
    };
    if ( <port> !~ '00$' ) {
        die "invalid fsync port: <port>\n";
    };

    command jobs start_job CommandInterpreter <name>:source;
    cd <name>:source;
        make_node JobController      jobs;
        make_node CommandInterpreter hosts;

        if (<count>) {
            make_node Buffer             file:buffer         <name>.db <max_files>;
            make_node Watchdog           file:watchdog       file:gate;
            make_node Gate               file:gate;
            make_node AgeSieve           file:sieve          120;
            make_node FileController     FileController;
            make_node LoadBalancer       FileSender:load_balancer;
            make_node Echo               output:link;
            make_node Tee                output:tee;
            make_node Responder          FileSender:cap;
            make_node Scheduler          scheduler;
            make_node Watchdog           DirStats:watchdog   DirStats:gate;
            make_node Gate               DirStats:gate;
            make_node SetStream          DirStats:set_stream;
            make_node Buffer             DirStats:buffer;
            make_node AgeSieve           DirStats:sieve      30;
            local args = <path> localhost:(<port> + 1) <max_files> <pedantic>;
            if (<user>) {
                make_node SudoFarmer DirStats <user> <count> DirStats <args>;
            }
            else {
                make_node JobFarmer DirStats <count> DirStats <args>;
            };
        };

        make_node Responder          DirStats:cap;
        make_node Tee                DirStats:tee;
        make_node ClientConnector    DirStats:client_connector DirStats:tee;

        if (<count>) {
            command DirStats:buffer set_count 4;
            for i (1 .. <count>) {
                local bridge_port = <port> + (<i> * 10) + 1;
                command jobs start_job CommandInterpreter <name>:bridge<i>;
                cd <name>:bridge<i>;
                    if (<user>) {
                        make_node SudoFarmer FileSender <user> 1 FileSender <path> _parent/FileSender:tee;
                    }
                    else {
                        make_node FileSender FileSender <path> FileSender:tee;
                    };
                    make_node Tee             FileSender:tee;
                    make_node ClientConnector FileSender:client_connector FileSender:tee;
                    connect_sink FileSender:tee FileSender; # force responses through
                    connect_node FileSender     _parent/output:link;
                    listen_inet --scheme=rsa --use-ssl <listen_ip>:<bridge_port>;
                    register <listen_ip>:<bridge_port> FileSender:client_connector AUTHENTICATED;
                    secure 3;
                cd ..;
                connect_node FileSender:load_balancer <name>:bridge<i>/FileSender;
            };
            connect_node output:tee                    FileSender:cap;
            connect_node output:link                   output:tee;
            connect_node DirStats                      DirStats:cap;
            connect_node DirStats:sieve                DirStats;
            connect_node DirStats:buffer               DirStats:sieve;
            connect_node DirStats:set_stream           DirStats:buffer;
            connect_node DirStats:gate                 DirStats:set_stream;
            connect_node FileController                FileSender:load_balancer;
            connect_node file:sieve                    FileController;
            connect_node file:gate                     file:sieve;
            connect_node file:buffer                   file:gate;

            # sync targets
            for target (<targets>) {
                local next = <index> + 1;
                connect_inet --scheme=rsa
                             --use-ssl
                             --host=<target>
                             --port=<port>
                             --name=target<index>;
                make_node MemorySieve target<index>:sieve 1024 should_warn;
                connect_node target<index>:sieve target<index>/file:gate;
                if (<index> == 1) {
                    connect_node output:tee target<index>:sieve;
                }
                else {
                    make_node Gate target<index>:gate;
                    connect_node target<index>:gate target<index>:sieve;
                    connect_node output:tee   target<index>:gate;
                };
                if ( <next> <= <total> ) {
                    # fall back on next target
                    connect_inet --scheme=rsa
                                 --use-ssl
                                 --host=<target>
                                 --port=(<port> + 99)
                                 --name=target<index>:heartbeat;
                    make_node Watchdog target<index>:watchdog target<next>:gate;
                    connect_node target<index>:heartbeat target<index>:watchdog;
                    if ( <next> < <total> ) {
                        connect_node target<index>:watchdog  target<next>:watchdog;
                    };
                };
            };

            # peer suppression
            for peer (<peers>) {
                # suppress dirstats if target is up
                connect_inet --scheme=rsa
                             --use-ssl
                             --host=<peer>
                             --port=(<port> + 99)
                             --name=peer<index>:heartbeat;
                connect_node DirStats:watchdog file:watchdog;
                connect_node peer<index>:heartbeat  DirStats:watchdog;
            };

            # send dirstats
            for update_path (<broadcasts>) {
                command scheduler every <interval>s send DirStats:gate <update_path>;
            };

            # heartbeat
            make_node Timer           heartbeat 5000;
            make_node Tee             heartbeat:tee;
            make_node ClientConnector heartbeat:client_connector heartbeat:tee;
            connect_node heartbeat heartbeat:tee;
            listen_inet --scheme=rsa --use-ssl <listen_ip>:(<port> + 99);
            register <listen_ip>:(<port> + 99) heartbeat:client_connector AUTHENTICATED;
        };

        # listen ports for incoming connections
        listen_inet --scheme=rsa --use-ssl <listen_ip>:<port>;
        listen_inet --scheme=rsa             127.0.0.1:(<port> + 1);
        listen_inet --scheme=rsa --use-ssl <listen_ip>:(<port> + 2);
        register <listen_ip>:(<port> + 2) DirStats:client_connector AUTHENTICATED;

        if ( <probe> and <count> ) {
            buffer_probe;
        };
        secure <secure>;
    cd ..;
    return;
}

func fsync_destination {
    local name             ||= 'fsync';
    local path             ||= '/usr/local/sync';
    local user;
    local count            ||= 4;
    local delete_threshold //= 60;
    local mode;
    local sources;
    local listen;
    local port = var fsync_ports.<name>;
    if ( <user> ) [
        local count = 1;
    ];
    if ( not <port> ) {
        die "invalid fsync channel: <name>";
    };
    if ( <port> !~ '00$' ) {
        die "invalid fsync port: <port>\n";
    };
    if ( not <sources> ) {
        return;
    };

    command jobs start_job CommandInterpreter <name>:destination;
    cd <name>:destination;
        make_node JobController      jobs;
        make_node CommandInterpreter hosts;
        make_node Null               null;
        local args = <path> <delete_threshold> <mode>;
        if (<user>) {
            make_node SudoFarmer DirCheck <user> <count> DirCheck <args>;
        }
        else {
            make_node JobFarmer DirCheck <count> DirCheck <args>;
        };
        if (not <mode> or <mode> eq 'update') {
            if (<user>) {
                for i (1 .. <count>) {
                    command jobs start_job CommandInterpreter <name>:destination<i>
                        make_node SudoFarmer FileReceiver <user> 1 FileReceiver <path>;
                };
            }
            else {
                for i (1 .. <count>) {
                    command jobs start_job CommandInterpreter <name>:destination<i>
                        make_node FileReceiver FileReceiver <path>;
                };
            };
        };
        local j = 1;
        for source (<sources>) {
            if (not <mode> or <mode> eq 'update') {
                for i (1 .. <count>) {
                    local bridge_port = <port> + (<i> * 10) + 1;
                    command <name>:destination<i> connect_inet --scheme=rsa
                                                               --use-ssl
                                                               --owner=FileReceiver
                                                               --host=<source>
                                                               --port=<bridge_port>;
                };
            };
            command hosts connect_inet --scheme=rsa
                                       --use-ssl
                                       --owner=DirCheck
                                       --host=<source>
                                       --port=(<port> + 2)
                                       --name=dirstats<j>;
            j++;
        };
        for listen (<listen>) {
            print "  listen_inet --scheme=rsa <listen>;
        };
        if (not <mode> or <mode> eq 'update') {
            for i (1 .. <count>) {
                command <name>:destination<i> secure 3;
            };
        };
        secure 3;
    cd ..;
    return;
}
