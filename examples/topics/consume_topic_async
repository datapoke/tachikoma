#!/usr/bin/env perl
use strict;
use warnings;
use Tachikoma::EventFrameworks::Select;
use Tachikoma::Nodes::Router;
use Tachikoma::Nodes::ConsumerBroker;
use Tachikoma::Nodes::Socket qw( TK_SYNC );
use Tachikoma::Nodes::STDIO qw( TK_R );
use Getopt::Long qw( GetOptions );

use version; our $VERSION = qv('v2.0.929');

my $home            = ( getpwuid $< )[7];
my @default_configs = (
    "$home/.tachikoma/etc/tachikoma.conf",
    '/usr/local/etc/tachikoma.conf',
);
my $config_file   = undef;
my $host          = 'localhost';
my $port          = 5501;
my $use_SSL       = undef;
my $topic_name    = undef;
my $offset        = 'end';
my $batch         = undef;
my $poll_interval = 0.1;
my $debug         = undef;
my $help          = undef;

my $r = GetOptions(
    'config=s'        => \$config_file,
    'host=s'          => \$host,
    'port=i'          => \$port,
    'use-ssl'         => \$use_SSL,
    'topic=s'         => \$topic_name,
    'offset=s'        => \$offset,
    'batch'           => \$batch,
    'poll_interval=f' => \$poll_interval,
    'debug:i'         => \$debug,
    'help'            => \$help,
);
$topic_name //= $ARGV[0];
$offset = 'start' if ($batch);
$debug  = 1       if ( defined $debug and not $debug );

usage() if ( $help or not $r or not $topic_name );
my $config = Tachikoma->configuration;
$config->load_config_file( $config_file ? $config_file : @default_configs );
$config->hz( 1 / $poll_interval );
Tachikoma->event_framework( Tachikoma::EventFrameworks::Select->new );

my $router          = Tachikoma::Nodes::Router->new;
my $consumer_broker = Tachikoma::Nodes::ConsumerBroker->new;
my $stdout          = Tachikoma::Nodes::STDIO->filehandle( *STDOUT, TK_SYNC );
my $socket          = undef;

$consumer_broker->name("$topic_name:consumer");
$consumer_broker->flags(TK_SYNC);
$consumer_broker->broker_path('_socket/broker');
$consumer_broker->topic($topic_name);
$consumer_broker->debug_state($debug);
$consumer_broker->default_offset($offset);
$consumer_broker->max_unanswered(0);
$consumer_broker->poll_interval($poll_interval);

if ($batch) {
    $consumer_broker->register( 'READY',
        sub { Tachikoma->shutdown_all_nodes } );
}
$consumer_broker->owner('_stdout');
$consumer_broker->sink($router);

$stdout->name('_stdout');
$stdout->on_EOF('ignore');
$stdout->sink($router);

$router->name('_router');
$router->debug_state($debug);
$socket =
    Tachikoma::Nodes::Socket->inet_client( $host, $port, undef, $use_SSL );
$socket->name('_socket');
$socket->debug_state($debug);
$socket->on_EOF('reconnect');
$socket->sink($router);
$router->drain;

sub usage {
    print "Usage:\n"
        . "consume_topic [ --config=<path>   ]\n"
        . "              [ --host=<host>     ]\n"
        . "              [ --port=<port>     ]\n"
        . "              [ --use-ssl         ]\n"
        . "              [ --topic=<topic>   ]\n"
        . "              [ --offset=<offset> ]\n"
        . "              [ --batch           ]\n"
        . "              [ --debug           ]\n"
        . "              [ --help            ]\n"
        . "              <topic name>\n";
    exit 1;
}
