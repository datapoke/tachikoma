#!/usr/bin/env perl
use strict;
use warnings;
use Tachikoma::Nodes::Topic;
use Time::HiRes;
use Getopt::Long qw( GetOptions );
use Digest::MD5 qw( md5 );

my $home = ( getpwuid $< )[7];
Tachikoma->configuration->load_config_file(
    "$home/.tachikoma/etc/tachikoma.conf",
    '/usr/local/etc/tachikoma.conf',
);

my $topic      = undef;
my $partition  = -1;
my $batch_size = 128;
my $mode       = 'values';
my $persist    = undef;
my $help       = undef;
my ( $r, $argv ) = GetOptions(
    'topic=s'     => \$topic,
    'partition=i' => \$partition,
    'batch=i'     => \$batch_size,
    'mode=s'      => \$mode,
    'persist'     => \$persist,
    'help'        => \$help,
);
$topic //= $ARGV[0];
usage() if ( $help or not $r or not $topic );

my $broker     = Tachikoma::Nodes::Topic->new($topic);
my $partitions = $broker->get_partitions;
my $i          = $partition > -1 ? $partition : 0;
my @lines      = ();
my $last       = 0;
my $total      = 0;
my @buf        = ();

$broker->persist( $persist ? 'cancel' : undef );

if ( $mode eq 'keys' ) {
    while ( my $key = <STDIN> ) {
        chomp $key;
        my $i = 0;
        $i += $_ for ( unpack "C*", md5($key) );
        $i %= scalar @{$partitions};
        $buf[$i] ||= [];
        push @{ $buf[$i] }, $key;
        if ( @{ $buf[$i] } > $batch_size ) {
            my %batch = ();
            $batch{$_} = [1] for ( @{ $buf[$i] } );
            $Tachikoma::Now = time;
            $broker->send_kv( $i, \%batch )
                or die $broker->sync_error;
            $buf[$i] = [];
        }
    }
    for my $i ( 0 .. $#buf ) {
        next if ( not $buf[$i] or not @{ $buf[$i] } );
        my %batch = ();
        $batch{$_} = [1] for ( @{ $buf[$i] } );
        $broker->send_kv( $i, \%batch )
            or die $broker->sync_error;
        $buf[$i] = [];
    }
}
elsif ( $mode eq 'bytestream' ) {
    while ( my $size = sysread( STDIN, $buf[0], 65536 ) ) {
        $broker->send_messages( $i, \@buf ) or die $broker->sync_error;
        $i = 0 if ( $partition < 0 and $i++ >= $#$partitions );
    }
}
else {
    while (1) {
        my $line = <STDIN>;
        push( @lines, $line ) if ( defined $line );
        $Tachikoma::Right_Now = Time::HiRes::time;
        next
            if (defined $line
            and @lines < $batch_size
            and $Tachikoma::Right_Now - $last < 1 );
        $Tachikoma::Now = int $Tachikoma::Right_Now;
        while ( @lines and not $broker->send_messages( $i, \@lines ) ) {
            print STDERR $broker->sync_error;
            sleep 1;
        }
        last if ( not defined $line or not @lines );
        @lines = ();
        $last  = $Tachikoma::Right_Now;
        $i     = 0 if ( $partition < 0 and $i++ >= $#$partitions );
    }
}

print "ok\n";

sub usage {
    print "Usage:\n"
        . "produce_topic   --topic=<name>\n"
        . "              [ --partition=<int>   ]\n"
        . "              [ --batch=<int>       ]\n"
        . "              [ --mode=<string>     ]\n"
        . "              [ --persist           ]\n"
        . "    # valid modes: keys values bytestream\n";
    exit 1;
}
